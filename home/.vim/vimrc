set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" Brief help
"
" :BundleInstall  - install bundles (won't update installed)
" :BundleInstall! - update if installed
"
" :Bundles foo    - search for foo
" :Bundles! foo   - refresh cached list and search for foo
"
" :BundleClean    - confirm removal of unused bundles
" :BundleClean!   - remove without confirmation
"
" see :h vundle for more details
" or wiki for FAQ
" Note: comments after Bundle command are not allowed..

" My Bundles here:
"
Bundle 'robertwahler/vim-markdown'
Bundle 'olivierverdier/vim-latex-box'
Bundle 'sjbach/lusty'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'vim-scripts/Obvious-Mode'
Bundle 'ervandew/supertab'
Bundle 'majutsushi/tagbar'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'sjl/gundo.vim'
Bundle 'mileszs/ack.vim'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'gregsexton/gitv'
Bundle 'tpope/vim-unimpaired'
Bundle 'vim-scripts/desert256.vim'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'scrooloose/syntastic'
Bundle 'godlygeek/tabular'
Bundle 'altercation/vim-colors-solarized'
Bundle 'jnurmine/Zenburn'
Bundle 'thinca/vim-ft-markdown_fold'
Bundle 'bronson/vim-trailing-whitespace'
Bundle 'rson/vim-conque'
Bundle 'sjl/threesome.vim'
Bundle 'xolox/vim-shell'
Bundle 'bkad/CamelCaseMotion'
Bundle 'lambdalisue/nose.vim'
Bundle 'reinh/vim-makegreen'
Bundle 'kien/rainbow_parentheses.vim'
Bundle 'Lokaltog/vim-powerline'
Bundle 'kien/ctrlp.vim'
Bundle 'michaeljsmith/vim-indent-object'
Bundle 'SirVer/ultisnips'
Bundle 'vim-scripts/Lucius'
Bundle 'kshenoy/vim-signature'
Bundle 'goldfeld/vim-seek'
Bundle 'vim-scripts/AutoTag'
Bundle 'klen/python-mode'
"Bundle 'davidhalter/jedi-vim'

filetype plugin indent on

""""""""""""""""""""""""""""""""""""
" General Setup
""""""""""""""""""""""""""""""""""""
" set how many lines of history vim remembers
set history=700

" set to autoread a file when it is changed from the outside
set autoread

" map the leader to comma instead of backslash
let mapleader = ","
let g:mapleader = ","

" map the local leader to backslash
let maplocalleader = "\\"
let g:maplocalleader = "\\"

" set the shell
set shell=/bin/bash

""""""""""""""""""""""""""""""""""""
" vim user interface settings
""""""""""""""""""""""""""""""""""""
" set 5 lines/chars when scrolling
set scrolloff=5
set sidescrolloff=5

" turn on wild menu
set wildmode=list:longest
set wildmenu
set wildignore+=*.so,*.zip,*.pyc

" always show the current position
set ruler

" the command bar height
set cmdheight=2

" change buffers without saving
set hid

" set backspace configuration
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" ignore case when searching
set ignorecase
set smartcase

" highlight search
set hlsearch
" use ,/ to hide the highlighting
nnoremap <silent> <leader>/ :nohlsearch<Bar>:echo<CR>

" turn on incremental search
set incsearch

" don't redraw while running macros
set nolazyredraw

" set pattern matching to magic and hack to always set very magic when searching
set magic
nnoremap / /\v
nnoremap ? ?\v

" show matching braces for 0.2 seconds
set showmatch
set mat=2

" no sound on errors
"set noerrorbells
set visualbell

" turn on line numbering
set number


""""""""""""""""""""""""""""""""""""
" Colors and Fonts
""""""""""""""""""""""""""""""""""""
" enable syntax hl
syntax enable

" Set font
if has("macunix")
    set gfn=Source\ Code\ Pro:h12
    "set gfn=Menlo:h14
endif

" set 256 colors
set t_Co=256
set background=dark
"colorscheme solarized
let g:zenburn_old_Visual = 1
let g:zenburn_alternate_Visual = 1
let g:zenburn_high_Contrast=1
colorscheme zenburn


set encoding=utf8
try
    lang en_US
catch
endtry

" default filetypes
set ffs=unix,dos,mac


""""""""""""""""""""""""""""""""""""
" Files backup and undo
""""""""""""""""""""""""""""""""""""
" turn off backups since we're usually using git anyway
set nobackup

" turn on persistent undo
if version >= 703
    set undodir=~/.vim/undodir
    set undofile
endif


""""""""""""""""""""""""""""""""""""
" Text, tab, and indent related
""""""""""""""""""""""""""""""""""""
set expandtab
set shiftwidth=4
set tabstop=4
set smarttab

set lbr
set tw=500

" auto indent
set ai

" smart indent
set si

" make shifts keep visual selection
vnoremap < <gv
vnoremap > >gv

" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use the arrows to something usefull
" press left and right to scroll through open buffers
map <right> :bn<cr>
map <left> :bp<cr>

" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" Specify the behavior when switching between buffers
try
  set switchbuf=usetab
  set stal=2
catch
endtry


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Pressing ,s will toggle and untoggle spell checking
map <leader>z :setlocal spell!<cr>

"Shortcuts using <leader>
" ,sn for next spelling mistake
map <leader>sn ]s
" ,sp for previous spelling mistake
map <leader>sp [s
" ,sa add word under cursor as a good word
map <leader>sa zg
" ,sc to suggest corrected spellings for current word
map <leader>sc z=


""""""""""""""""""""""""""""""
" => Python section
""""""""""""""""""""""""""""""
let python_highlight_all = 1


""""""""""""""""""""""""""""""
" => key mappings
""""""""""""""""""""""""""""""
" set jk to be <esc>
"inoremap jk <esc>
"cnoremap jk <c-c>

" ,v brings up vimrc file
nmap <leader>v :e ~/.vim/vimrc<CR>
" ,V reloads vimrc file
nmap <silent> <leader>V :source ~/.vim/vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" quick add newline with <CR>
nmap <CR> o<esc>

" show registers with ,r
nmap <leader>r :register<CR>

" paste from numbered register with ,<number>
nmap <leader>0 "0p
nmap <leader>1 "1p
nmap <leader>2 "2p
nmap <leader>3 "3p
nmap <leader>4 "4p
nmap <leader>5 "5p
nmap <leader>6 "6p
nmap <leader>7 "7p
nmap <leader>8 "8p
nmap <leader>9 "9p

" supertab
" press tab to start completion
" press tab again to cycle through completions
" press ctrl-y to accept suggested completion
set completeopt=menuone,longest
au FileType python set omnifunc=pythoncomplete#Complete
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabRetainCompletionDuration = "completion"
let g:SuperTabLongestEnhanced = 1
let g:SuperTabLongestHighlight = 1

" Tagbar
" press ,tt to open up the tagbar
" select a function to jump to and press <CR>
nnoremap <silent> <leader>tt :TagbarToggle<CR>
" Put tagbar on the left
let g:tagbar_left = 1
" Tagbar auto gets focus
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1
let g:tagbar_sort = 1

" set location to search for tag file
set tags=./tags;/

" Gundo hotkey
" press ,uu to open up a window containing the editing history of the current file
" press <ctrl>-w <ctrl>-w to cycle between undo and editing window
" press ,uu again to close
nnoremap <leader>uu :GundoToggle<CR>

" NERDTree hotkey
" press ,nn to toggle NERDTree display
" press ? for help
nnoremap <leader>nn :NERDTreeToggle<CR>
let g:NERDTreeQuitOnOpen = 1

" Setup viminfo
" Keep things persistant between editing sessions
set viminfo='10,\"100,:20,%,n~/.viminfo
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

" EasyMotion
" Adds the following motion commands:
" ,mj   Move up lines
" ,mk   Move down lines
" ,mf   Find character
" ,mF   Find character backwards
" plus some more. See :h easymotion
"let g:EasyMotion_leader_key = '<Leader>m'
let g:EasyMotion_leader_key = '<Space>'

" YankRing
" press ,yy to pull up the yank ring
" Press p to paste the selected text
let g:yankring_history_dir = '$HOME/.vim/.tmp'
nnoremap <silent> <leader>yy :YRShow<CR>

" set so that we can use vim with nose testing
" use ,qq to do nose test
map <silent> <Leader>qq :call MakeGreen()<cr>
autocmd BufNewFile,BufRead *.py compiler nose
autocmd BufNewFile,BufRead *.py set nosmartindent

" set syntastic to always check file on read
 let g:syntastic_check_on_open=1

" set highlihgting for curson line and column
set cursorline

" set ,gg  and ,GG mapping for gitv browser and file mode
nmap <silent> <leader>gg :Gitv<CR>
nmap <silent> <leader>GG :Gitv!<CR>

" command to toggle rainbow parentheses
" sometimes useful for understanding nested expressions
nmap <leader>rr :RainbowParenthesesToggle<cr>

" powerline config
set laststatus=2
" tell powerline to use the solarized colorscheme
"let g:Powerline_colorscheme = "solarized"
" tell powerline to use the fancy new fonts
"let g:Powerline_symbols = "fancy"

" ControlP config
let g:ctrlp_map = '<c-p>'
let g:ctrlp_extensions = ['mixed', 'line']
let g:ctrlp_max_height = 20

" Toggle indent guides on and off
nmap <silent> <leader>ii :IndentGuidesToggle<CR>

" Toggle to last baffer
nmap <silent> <leader>p :b#<cr>

" move between windows
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>

" vim-signature - for setting and showing marks
"
" m[a-zA-Z]    : Toggle mark
"   m<Space>     : Delete all marks
"   m,           : Place the next available mark
"   ]`           : Jump to next mark
"   [`           : Jump to prev mark
"   ]'           : Jump to start of next line containing a mark
"   ['           : Jump to start of prev line containing a mark
"   `]           : Jump by alphabetical order to next mark
"   `[           : Jump by alphabetical order to prev mark
"   ']           : Jump by alphabetical order to start of next line containing a mark
"   '[           : Jump by alphabetical order to start of prev line containing a mark
"
"   m[0-9]       : Toggle the corresponding marker !@#$%^&*()
"   m<S-[0-9]>   : Remove all markers of the same type
"   ]=           : Jump to next line having same marker
"   ]-           : Jump to prev line having same marker
"   m<BackSpace> : Remove all markers

highlight MatchParen gui=bold guibg=NONE guifg=lightblue cterm=bold ctermbg=NONE

" don't put double spaces after a period
set nojoinspaces

" mark columns that are too wide
let &colorcolumn=join(range(121,999),",")
"hi ColorColumn guibg=#000000 ctermbg=0

" python-mode
let g:pymode_run = 0
let g:pymode_folding = 1
let g:pymode_motion = 1


