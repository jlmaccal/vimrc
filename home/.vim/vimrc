set nocompatible               " be iMproved
filetype off                   " required!

if has('vim_starting')
    set rtp+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
NeoBundle 'robertwahler/vim-markdown'
NeoBundle 'LaTeX-Box-Team/LaTeX-Box'
NeoBundle 'vim-scripts/Obvious-Mode'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'
NeoBundle 'sjl/gundo.vim'
NeoBundle 'rking/ag.vim'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'gregsexton/gitv'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'vim-scripts/desert256.vim'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'godlygeek/tabular'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'jnurmine/Zenburn'
NeoBundle 'thinca/vim-ft-markdown_fold'
NeoBundle 'bronson/vim-trailing-whitespace'
NeoBundle 'sjl/threesome.vim'
NeoBundle 'bkad/CamelCaseMotion'
NeoBundle 'lambdalisue/nose.vim'
NeoBundle 'reinh/vim-makegreen'
NeoBundle 'kien/rainbow_parentheses.vim'
NeoBundle 'michaeljsmith/vim-indent-object'
NeoBundle 'vim-scripts/Lucius'
NeoBundle 'kshenoy/vim-signature'
NeoBundle 'vim-scripts/AutoTag'
NeoBundle 'klen/python-mode'
NeoBundle 'paradigm/TextObjectify'
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'coderifous/textobj-word-column.vim'
NeoBundle 'thinca/vim-textobj-between'
NeoBundle 'Julian/vim-textobj-brace'
NeoBundle 'kana/vim-textobj-indent'
NeoBundle 'Julian/vim-textobj-variable-segment'
NeoBundle 'bling/vim-airline'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'h1mesuke/unite-outline'
NeoBundle 'tacroe/unite-mark'
NeoBundle 'vim-scripts/VisIncr'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
" NeoBundle 'davidhalter/jedi-vim'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'justinmk/vim-sneak'
NeoBundle 'Shougo/neomru.vim'
call neobundle#end()

filetype plugin indent on
NeoBundleCheck

""""""""""""""""""""""""""""""""""""
" General Setup
""""""""""""""""""""""""""""""""""""
" set how many lines of history vim remembers
set history=700

" set to autoread a file when it is changed from the outside
set autoread

" map the leader to comma instead of backslash
let mapleader = ","
let g:mapleader = ","

" map the local leader to backslash
let maplocalleader = "\\"
let g:maplocalleader = "\\"

" set the shell
set shell=/bin/bash

""""""""""""""""""""""""""""""""""""
" vim user interface settings
""""""""""""""""""""""""""""""""""""
" set 5 lines/chars when scrolling
set scrolloff=10
set sidescrolloff=5

" turn on wild menu
set wildmode=list:longest
set wildmenu
set wildignore+=*.so,*.zip,*.pyc

" always show the current position
set ruler

" the command bar height
set cmdheight=2

" change buffers without saving
set hid

" set backspace configuration
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" ignore case when searching
set ignorecase
set smartcase

" highlight search
set hlsearch
" use ,/ to hide the highlighting
nnoremap <silent> <leader>/ :nohlsearch<Bar>:echo<CR>

" turn on incremental search
set incsearch

" don't redraw while running macros
set nolazyredraw

" set pattern matching to magic and hack to always set very magic when searching
set magic
nnoremap / /\v
nnoremap ? ?\v

" show matching braces for 0.2 seconds
set showmatch
set mat=2

" no sound on errors
"set noerrorbells
set visualbell


""""""""""""""""""""""""""""""""""""
" Colors and Fonts
""""""""""""""""""""""""""""""""""""
" enable syntax hl
syntax enable

" Set font
if has("macunix")
    set gfn=Source\ Code\ Pro:h13
    "set gfn=Menlo:h14
endif

" set 256 colors
set t_Co=256
set background=dark
"colorscheme lucius
"LuciusDark
colorscheme jellybeans

set encoding=utf8
try
    lang en_US
catch
endtry

" default filetypes
set ffs=unix,dos,mac


""""""""""""""""""""""""""""""""""""
" Files backup and undo
""""""""""""""""""""""""""""""""""""
" turn off backups since we're usually using git anyway
set nobackup

" turn on persistent undo
if has("persistent_undo")
    set undodir=~/.vim/undodir
    set undofile
endif

""""""""""""""""""""""""""""""""""""
" Text, tab, and indent related
""""""""""""""""""""""""""""""""""""
set expandtab
set shiftwidth=4
set tabstop=4
set smarttab

set lbr
set tw=500

" auto indent
set ai

" smart indent
set si

" make shifts keep visual selection
vnoremap < <gv
vnoremap > >gv

" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" Specify the behavior when switching between buffers
try
  set switchbuf=usetab
  set stal=2
catch
endtry


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Pressing ,s will toggle and untoggle spell checking
map <leader>z :setlocal spell!<cr>

"Shortcuts using <leader>
" ,sn for next spelling mistake
map <leader>sn ]s
" ,sp for previous spelling mistake
map <leader>sp [s
" ,sa add word under cursor as a good word
map <leader>sa zg
" ,sc to suggest corrected spellings for current word
map <leader>sc z=


""""""""""""""""""""""""""""""
" => Python section
""""""""""""""""""""""""""""""
let python_highlight_all = 1


""""""""""""""""""""""""""""""
" => key mappings
""""""""""""""""""""""""""""""
" set jk to be <esc>
"inoremap jk <esc>
"cnoremap jk <c-c>

" ,v brings up vimrc file
nmap <leader>v :e ~/.vim/vimrc<CR>
" ,V reloads vimrc file
nmap <silent> <leader>V :source ~/.vim/vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" quick add newline with <CR>
nmap <CR> o<esc>

" show registers with ,r
nmap <leader>r :register<CR>

" paste from numbered register with ,<number>
nmap <leader>0 "0p
nmap <leader>1 "1p
nmap <leader>2 "2p
nmap <leader>3 "3p
nmap <leader>4 "4p
nmap <leader>5 "5p
nmap <leader>6 "6p
nmap <leader>7 "7p
nmap <leader>8 "8p
nmap <leader>9 "9p


" Tagbar
" press ,tt to open up the tagbar
" select a function to jump to and press <CR>
nnoremap <silent> <leader>tt :TagbarToggle<CR>
" Put tagbar on the left
let g:tagbar_left = 1
" Tagbar auto gets focus
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1
let g:tagbar_sort = 1

" set location to search for tag file
set tags=./tags;/

" Gundo hotkey
" press ,uu to open up a window containing the editing history of the current file
" press <ctrl>-w <ctrl>-w to cycle between undo and editing window
" press ,uu again to close
nnoremap <leader>uu :GundoToggle<CR>

" Setup viminfo
" Keep things persistant between editing sessions
set viminfo='10,\"100,:20,%,n~/.viminfo
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

" EasyMotion
" Adds the following motion commands:
" ,mj   Move up lines
" ,mk   Move down lines
" ,mf   Find character
" ,mF   Find character backwards
" plus some more. See :h easymotion
let g:EasyMotion_leader_key = '<Leader><Leader>'

" set so that we can use vim with nose testing
" use ,qq to do nose test
map <silent> <Leader>qq :call MakeGreen()<cr>
autocmd BufNewFile,BufRead *.py compiler nose
autocmd BufNewFile,BufRead *.py set nosmartindent

" set syntastic to always check file on read
 let g:syntastic_check_on_open=1
 let g:syntastic_python_checkers = ['flake8']
 let g:syntastic_python_flake8_args='--ignore=E501,E128'

" set highlihgting for curson line and column
set cursorline

" set ,gg  and ,GG mapping for gitv browser and file mode
nmap <silent> <leader>gg :Gitv<CR>
nmap <silent> <leader>GG :Gitv!<CR>

" command to toggle rainbow parentheses
" sometimes useful for understanding nested expressions
nmap <leader>rr :RainbowParenthesesToggle<cr>

" always show the status line
set laststatus=2

" Toggle indent guides on and off
nmap <silent> <leader>ii :IndentGuidesToggle<CR>

" Toggle to last baffer
nmap <silent> <leader>p :b#<cr>

" vim-signature - for setting and showing marks
"
" m[a-zA-Z]    : Toggle mark
"   m<Space>     : Delete all marks
"   m,           : Place the next available mark
"   ]`           : Jump to next mark
"   [`           : Jump to prev mark
"   ]'           : Jump to start of next line containing a mark
"   ['           : Jump to start of prev line containing a mark
"   `]           : Jump by alphabetical order to next mark
"   `[           : Jump by alphabetical order to prev mark
"   ']           : Jump by alphabetical order to start of next line containing a mark
"   '[           : Jump by alphabetical order to start of prev line containing a mark
"
"   m[0-9]       : Toggle the corresponding marker !@#$%^&*()
"   m<S-[0-9]>   : Remove all markers of the same type
"   ]=           : Jump to next line having same marker
"   ]-           : Jump to prev line having same marker
"   m<BackSpace> : Remove all markers

"highlight MatchParen gui=bold guibg=NONE guifg=lightblue cterm=bold ctermbg=NONE

" don't put double spaces after a period
set nojoinspaces

" mark columns that are too wide
let &colorcolumn=join(range(121,999),",")
hi ColorColumn guifg=NONE guibg=#1c1c1c guisp=#1c1c1c gui=NONE ctermfg=NONE ctermbg=234 cterm=NONE

"
" python-mode
"
let g:pymode_folding = 1
let g:pymode_motion = 1
let g:pymode_doc = 0
let g:pymode_run = 0
let g:pymode_lint = 0
let g:pymode_rope = 0
let g:pymode_virtualenv = 1
let g:pymode_indent = 1
let g:pymode_options = 1

" search for character within line
nmap <space><space> <leader><leader>f

" set folds to be off by default
set nofoldenable

" relative numbering
set relativenumber
set number
set nostartofline

"
" Unite configuration
"
let g:unite_source_history_yank_enable = 1
call unite#filters#matcher_default#use(['matcher_fuzzy'])

nnoremap <C-p>    :Unite -no-split -buffer-name=files -start-insert   file_rec/async:!<cr>
nnoremap <space>f :Unite -no-split -buffer-name=files                 file<cr>
nnoremap <space>r :Unite -no-split -buffer-name=mru                   file_mru<cr>
nnoremap <space>/ :Unite -no-split -buffer-name=grep                  grep:.<cr>
nnoremap <space>y :Unite -no-split -buffer-name=history               history/yank<cr>
nnoremap <space>b :Unite -no-split -buffer-name=buffers               buffer<cr>
nnoremap <space>o :Unite -no-split -buffer-name=outline -start-insert outline<cr>
nnoremap <space>m :Unite -no-split -buffer-name=marks -quick-match    mark<cr>
nnoremap <space>j :Unite -no-split -buffer-name=jump                  jump<cr>

autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Play nice with supertab
  let b:SuperTabDisabled=1
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  nmap <buffer> <ESC>   <Plug>(unite_exit)
  imap <buffer> jj      <Plug>(unite_insert_leave)
  imap <buffer> <ESC>   <Plug>(unite_exit)
endfunction

" Use ag for search
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif

"
" NeoComplCache settings
"
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 2
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" move up and down with ctrl-j / ctrl-k
inoremap <expr><C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <expr><C-k> pumvisible() ? "\<C-p>" : "\<C-k>"
" complete common subword with tab
inoremap <expr><Tab> pumvisible()? neocomplete#complete_common_string() : "\<Tab>"
" when we backspace, kill the popup
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" close the completion window
inoremap <expr><C-y>  neocomplete#close_popup()
" cancel completion
inoremap <expr><C-e>  neocomplete#cancel_popup()

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

"
" neosnippets
"
imap <C-l>     <Plug>(neosnippet_expand_or_jump)
smap <C-l>     <Plug>(neosnippet_expand_or_jump)
xmap <C-l>     <Plug>(neosnippet_expand_target)

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

let g:neosnippet#snippets_directory='~/.vim/snippets'

set list listchars=tab:⇥⇥


" window resize mode
let g:winresizer_start_key='<C-e>'
let g:winresizer_vert_resize=1
let g:winresizer_horiz_resize=1

"
" jedi
"
" don't set vim settings automatically
" autocmd FileType python setlocal omnifunc=jedi#complete
" let g:jedi#auto_vim_configuration = 0
if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.python = '[^. \t]\.\w*'

"
" configure status line to show open buffers
"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

let g:tex_conceal=""

" enable streak mode
let g:sneak#streak = 1

" text objects
"
" word column
"     ac  -> a column based on a word
"     ic  -> a column based on innner word
"     aC  -> a column based on a WORD
"     ic  -> a column based on inner WORD
"
" between
"     af{char} / if{char} for region between {char}s
"
" brace
"     aj/ij for the closest region of () [] {}
"
" indent
"     ai/ii for block of similarly indented lines
"     aI/II for a block of lines with the same indentation
"
" variable-segment
"     av/iv for the segment between _ or CamelCase variables
"
